<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">


    <!-- 配置不需要安全管理的url -->
    <http pattern="/" security="none"/>
    <http pattern="/www/lib/angular" security="none"/>
    <http pattern="/errorpage" security="none"/>
    <http pattern="/login.html" security="none"/>
    <!--不需要拦截的请求-->
    <http pattern="/**/*.action" security="none" />

    <http use-expressions='true' entry-point-ref="myAuthenticationEntryPoint"
          access-denied-page="/errorpage/accessDenied.html">
        <!--会话管理  在wab.xml还要添加对应listener-->
        <session-management>
            <concurrency-control max-sessions="1" expired-url="${login.page.url}"/>
        </session-management>

        <!-- 认证和授权 -->
        <!-- 登录 -->
        <custom-filter ref="ajaxLoginFilter" position="FORM_LOGIN_FILTER"/>
        <custom-filter ref="loginFilter" before="FORM_LOGIN_FILTER"/>

        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>

        <!-- 登出管理 -->
        <logout invalidate-session="true" delete-cookies="JSESSIONID" logout-url="${logout.url}" success-handler-ref="logOutHandler"/>

    </http>

    <!-- 未登录的切入点 --><!-- 需要有个切入点 -->
    <b:bean id="myAuthenticationEntryPoint" class="cn.com.cookie.spring.security.AjaxOrNotAuthenticationEntryPoint">
        <b:property name="loginFormUrl" value="${login.page.url}"/>
    </b:bean>

    <!-- ajax登录验证器：用户有没有登录的资格 -->
    <b:bean id="ajaxLoginFilter"
            class="cn.com.cookie.spring.security.CustomUsernamePasswordAuthenticationFilter">
        <b:property name="usernameParameter" value="${login.username.parameter}"/>
        <b:property name="passwordParameter" value="${login.password.parameter}"/>
        <b:property name="authenticationManager" ref="authenticationManager"/>
        <b:property name="filterProcessesUrl" value="${login.ajax.url}"/>
        <b:property name="authenticationSuccessHandler">
            <b:bean class="cn.com.cookie.spring.handler.AjaxAuthenticationSuccessHandler">
            </b:bean>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="cn.com.cookie.spring.handler.AjaxAuthenticationFailureHandler">
            </b:bean>
        </b:property>
    </b:bean>

    <!-- 普通登录验证器 -->
    <b:bean id="loginFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <b:property name="authenticationManager" ref="authenticationManager"/>
        <b:property name="authenticationFailureHandler" ref="loginFailureHandler"/>
        <b:property name="authenticationSuccessHandler" ref="loginSuccessHandler"/>
        <b:property name="usernameParameter" value="${login.username.parameter}"/>
        <b:property name="passwordParameter" value="${login.password.parameter}"/>
        <b:property name="filterProcessesUrl" value="${login.form.url}"/>
    </b:bean>
    <b:bean id="loginSuccessHandler" class="cn.com.cookie.spring.handler.LoginSuccessHandler">
        <b:property name="alwaysUseDefaultTargetUrl" value="true" />
        <!--登录成功后跳转url-->
        <b:property name="defaultTargetUrl" value="${after.login.success.url}" />
    </b:bean>
    <b:bean id="loginFailureHandler" class="cn.com.cookie.spring.handler.LoginFailureHandler">
        <!--登录失败默认跳转页面-->
        <b:property name="defaultFailureUrl" value="${after.login.failure.url}" />
    </b:bean>

    <!--登出系统-->
    <b:bean id="logOutHandler" class="cn.com.cookie.spring.handler.LogOutHandler">
        <b:property name="alwaysUseDefaultTargetUrl" value="true" />
        <b:property name="defaultTargetUrl" value="${login.page.url}" />
    </b:bean>

    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <b:bean id="myFilter"
            class="cn.com.cookie.spring.security.LoginFilterSecurityInterceptor">
        <b:property name="authenticationManager" ref="authenticationManager"/>
        <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
        <b:property name="securityMetadataSource" ref="securityMetadataSource"/>
    </b:bean>

    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="myAppUserDetailService">
            <!--密码加密 -->
            <password-encoder ref="passwordEncoder" >
                <salt-source ref="saltSource"/>
            </password-encoder>
        </authentication-provider>
    </authentication-manager>

    <b:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder">
        <!-- false 表示：生成32位的Hex版, 这也是encodeHashAsBase64的, Acegi 默认配置; true  表示：生成24位的Base64版 -->
        <b:property name="encodeHashAsBase64" value="false"/>
    </b:bean>
    <!--使用用户信息的salt字段做为salt-->
    <b:bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
        <b:property name="userPropertyToUse" value="salt"/>
    </b:bean>

    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <b:bean id="myAccessDecisionManagerBean"
            class="cn.com.cookie.spring.security.MyAccessDecisionManager">
    </b:bean>

    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <b:bean id="securityMetadataSource"
            class="cn.com.cookie.spring.security.MyInvocationSecurityMetadataSource">
    </b:bean>

</b:beans>